//------------------------------------------------------------------------------
// <auto-generated>
//     ???? ??? ?????? ??????????.
//     ??????????? ??????:4.0.30319.42000
//
//     ????????? ? ???? ????? ????? ???????? ? ???????????? ?????? ? ????? ???????? ? ??????
//     ????????? ????????? ????.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace Shazzam.Shaders
{
	
	public class MyShaderEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(MyShaderEffect), 0);
		public static readonly DependencyProperty ToleranceProperty = DependencyProperty.Register("Tolerance", typeof(double), typeof(MyShaderEffect), new UIPropertyMetadata(((double)(0.12D)), PixelShaderConstantCallback(0)));
		public static readonly DependencyProperty KeyColorProperty = DependencyProperty.Register("KeyColor", typeof(Color), typeof(MyShaderEffect), new UIPropertyMetadata(Color.FromArgb(255, 0, 128, 0), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty TargetColorProperty = DependencyProperty.Register("TargetColor", typeof(Color), typeof(MyShaderEffect), new UIPropertyMetadata(Color.FromArgb(255, 255, 255, 0), PixelShaderConstantCallback(2)));
		public MyShaderEffect() {
			PixelShader pixelShader = new PixelShader();
			pixelShader.UriSource = new Uri(@"/Shader/MyShaderEffect.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(ToleranceProperty);
			this.UpdateShaderValue(KeyColorProperty);
			this.UpdateShaderValue(TargetColorProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		public double Tolerance {
			get {
				return ((double)(this.GetValue(ToleranceProperty)));
			}
			set {
				this.SetValue(ToleranceProperty, value);
			}
		}
		/// <summary>The color that becomes changed.</summary>
		public Color KeyColor {
			get {
				return ((Color)(this.GetValue(KeyColorProperty)));
			}
			set {
				this.SetValue(KeyColorProperty, value);
			}
		}
		/// <summary>The target color.</summary>
		public Color TargetColor {
			get {
				return ((Color)(this.GetValue(TargetColorProperty)));
			}
			set {
				this.SetValue(TargetColorProperty, value);
			}
		}
	}
}
